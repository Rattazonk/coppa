#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'coppa'
require 'net/ssh'
require 'net/sftp'

rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/coppa` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/coppa now"
  exit 64
end

include GLI::App

program_desc 'Coppa helps me uploading files to servers'

version Coppa::VERSION

subcommand_option_handling :normal
arguments :strict

switch [:v,:verbose], desc: 'Display verbose output'

flag [:c,:'config-file'],
	default_value: File.join(ENV['HOME'], '.copparc'),
	arg_name: 'Config file path',
	dec: 'Path of the coppa config file'


desc 'Is used to upload to the corresponding server'
arg_name 'Describe arguments to upload here'
command :up do |c|
	c.flag [:r, :'remote-path'],
		arg_name: 'Path on the remote machine'

  c.action do |global_options,options,args|
    # Your command logic here
		local_path = args.shift
		if local_path
			search_path = local_path = File.expand_path local_path
			server = nil
			matching_path_name = nil
			until not server.nil? or search_path == '/'
				search_path = File.expand_path "..", search_path
				server = global_options[:config].find do |server|
					matching_path_name = server["local"]["paths"].key search_path
				end
			end
			puts "Using server configuration of #{server["name"]}" if global_options[:verbose]
			remote_path = server["remote"]["paths"][matching_path_name]
			remote_path << local_path.sub(server["local"]["paths"][matching_path_name], '')
			puts "Upload #{local_path} to #{remote_path}." if global_options[:verbose]
			rescued = false
			begin 
				Net::SFTP.start(server["host"], server["user"], password: server["password"]) do |sftp|
					puts 'Connected to SFTP' if global_options[:verbose]
					sftp.upload local_path, remote_path
				end
			rescue Net::SFTP::StatusException => e
				raise e if rescued or e.code ==! 2
				rescued = true
				puts "Remote directory didnt exist, so we try to create it." if global_options[:verbose]
				begin
					Net::SFTP.start(server["host"], server["user"], password: server["password"]) do |sftp|
						sftp.mkdir! File.dirname(remote_path)
					end
					retry
				rescue Exception => e
					puts e.message
					puts e.backtrace
				end
			end
		end
    # If you have any errors, just raise them
    # raise "that command made no sense"
  end
end

desc 'not implemented yet'
arg_name 'Describe arguments to sync here'
command :sync do |c|
  c.action do |global_options,options,args|
    puts "sync command ran"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
	config_loaded = false

	config_path = File.absolute_path global[:'config-file']
	puts "Using #{config_path} as config file. " if global[:verbose]
	
	if File.exists?(config_path) && File.readable?(config_path)
		file = File.open config_path, "rb"
		global[:config] = YAML.load file.read
		file.close
	else
		global[:config] = {}
	end
	true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
